<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DOM on 技术之心</title>
    <link>http://localhost:1313/en/categories/dom/</link>
    <description>Recent content in DOM on 技术之心</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Oct 2021 00:06:00 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/en/categories/dom/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web 前端性能优化：批量 DOM 操作 - FastDOM</title>
      <link>http://localhost:1313/en/blog/computer-technology/web/web-performance-fastdom/</link>
      <pubDate>Mon, 04 Oct 2021 00:06:00 -0400</pubDate>
      <guid>http://localhost:1313/en/blog/computer-technology/web/web-performance-fastdom/</guid>
      <description>&lt;p&gt;利用 JS 开发的原生应用与依赖于 React.js/Vue 开发的框架/库应用，性能孰高孰低？这两者最显著的区别在于原生应用需要手动操作 DOM 完成业务，而框架/库应用是基于数据变化响应式的应用，后者只需要关注数据如何变化，至于体现在 DOM 上的变化皆由框架/库内部自动完成。所以，要搞清楚两者的性能优劣，可能&lt;strong&gt;批量&lt;/strong&gt;的 DOM 操作是一个不可忽略的核心因素。从代码执行的角度分析，框架/库也是基于原生 API 进行的封装抽象，因此代码执行时的路径更长、堆栈更深，由此可见原生 API 的操作性能应该是最高的。但是，现实情况是业务通常来说是复杂的，代码实现中 DOM 操作的逻辑分散在各处，那么多个 DOM 操作之间是否会产生影响从而不利于性能？这个时候就要关注宿主浏览器的渲染机制是如何理解批量的 DOM 操作的，这里引入的概念就是&lt;strong&gt;关键渲染路径（Critical rendering path）&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
