<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>计算机技术 on 技术之心</title><link>https://leezchuan.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/</link><description>Recent content in 计算机技术 on 技术之心</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 18 Dec 2024 11:59:15 +0000</lastBuildDate><atom:link href="https://leezchuan.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>前端开发中的流程自动化与提效实践</title><link>https://leezchuan.github.io/blog/computer-technology/web/platfrom-choose/</link><pubDate>Wed, 18 Dec 2024 11:59:15 +0000</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/web/platfrom-choose/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在开发过程中，我们常常需要处理各种平台，如Android、iOS、Web等。为了提高开发效率，我们需要选择合适的跨平台技术。本文将介绍几种常用的跨平台技术；&lt;/p></description></item><item><title>Web 前端性能优化：批量 DOM 操作 - FastDOM</title><link>https://leezchuan.github.io/blog/computer-technology/web/web-performance-fastdom/</link><pubDate>Mon, 02 Dec 2024 09:26:05 +0000</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/web/web-performance-fastdom/</guid><description>&lt;p>利用 JS 开发的原生应用与依赖于 React.js/Vue 开发的框架/库应用，性能孰高孰低？这两者最显著的区别在于原生应用需要手动操作 DOM 完成业务，而框架/库应用是基于数据变化响应式的应用，后者只需要关注数据如何变化，至于体现在 DOM 上的变化皆由框架/库内部自动完成。所以，要搞清楚两者的性能优劣，可能&lt;strong>批量&lt;/strong>的 DOM 操作是一个不可忽略的核心因素。从代码执行的角度分析，框架/库也是基于原生 API 进行的封装抽象，因此代码执行时的路径更长、堆栈更深，由此可见原生 API 的操作性能应该是最高的。但是，现实情况是业务通常来说是复杂的，代码实现中 DOM 操作的逻辑分散在各处，那么多个 DOM 操作之间是否会产生影响从而不利于性能？这个时候就要关注宿主浏览器的渲染机制是如何理解批量的 DOM 操作的，这里引入的概念就是&lt;strong>关键渲染路径（Critical rendering path）&lt;/strong>。&lt;/p></description></item><item><title>（转载）如何实现网站鼠标特效</title><link>https://leezchuan.github.io/blog/computer-technology/code/mouse-pointer/</link><pubDate>Thu, 24 Oct 2024 06:29:32 +0000</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/code/mouse-pointer/</guid><description>&lt;p>使用以下代码可以实现一个在画布上的鼠标特效&lt;/p></description></item><item><title>Web 字体加载对 DOM 位置的影响</title><link>https://leezchuan.github.io/blog/computer-technology/web/web-tips-fonts/</link><pubDate>Sun, 16 Oct 2022 23:49:00 +0800</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/web/web-tips-fonts/</guid><description>&lt;p>由于公司的业务会用到自己设计师定制的 Web 字体，所以一般在组件开发过程中会利用 CSS 引用该字体（&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face"




 target="_blank"
 


>@font-face&lt;/a>），前段时间发现一个线上问题：在部分 iOS 机型上，DOM 元素的位置发生了错位。&lt;/p></description></item><item><title>前端工程化：对于构建工具链的简单思考</title><link>https://leezchuan.github.io/blog/computer-technology/web/tools-web-fee-toolchain/</link><pubDate>Mon, 01 Aug 2022 21:07:00 +0800</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/web/tools-web-fee-toolchain/</guid><description>&lt;p>前端工程化是在做与业务开发完全不同的事情，旨在解决软件工程领域与开发者密切相关的问题，通常会将其与基建开发、DevOps 放在一起讨论。前端开发是复杂的，其结合了 HTML/CSS/JavaScript 3 种语言，甚至还有很多其超集，没有开箱即用的工具链，不像 Java Web 开发、Android 开发等等有官方或者商业领域非常成熟的工具可以利用，一切都源于开源社区的从 0 开始构建。正因如此，前端工程化领域百花齐放，开放与创新展现的淋漓尽致，这也是前端开发者了解学习软件工程的机会。&lt;/p></description></item><item><title>桥接模式：跨平台的事件机制设计</title><link>https://leezchuan.github.io/blog/computer-technology/program-architecture-design/bridge-mode-design-of-cross-platform-event-mechanism/</link><pubDate>Sun, 12 Jun 2022 22:22:00 +0800</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/program-architecture-design/bridge-mode-design-of-cross-platform-event-mechanism/</guid><description>&lt;p>对于 Web 的图表组件库来说，一些功能比较强大的开源库，渲染层可以支持 DOM、SVG、Canvas、WebGL 等多个平台的环境，而图表库的很多功能的实现都和渲染层紧密相关。&lt;/p></description></item><item><title>TypeScript：扩展第三方库的类型定义</title><link>https://leezchuan.github.io/blog/computer-technology/typescript/tools-typescript-type-extend/</link><pubDate>Sun, 09 Jan 2022 17:36:00 +0800</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/typescript/tools-typescript-type-extend/</guid><description>&lt;p>TypeScript 作为 JavaScript 的超集，为 Web 开发带来了强类型语言和类似代码智能提示这种良好的开发体验，而代码提示依赖于类型定义文件。类型定义文件的发展也经历了一个逐步演变的过程，从最初基于 JavaScript 编写的 npm 包，通过&lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped"




 target="_blank"
 


>社区方案&lt;/a>来引入类型定义包，再到目前多数模块基于 TypeScript 编写并在发布时带上类型定义文件这种最佳方案，开发者体验得到进一步的提升。&lt;/p></description></item><item><title>解析基于 core-js 与 ESLint 的 Web 兼容方案</title><link>https://leezchuan.github.io/blog/computer-technology/web/tools-web-fee-polyfill-corejs-eslint/</link><pubDate>Tue, 07 Dec 2021 01:13:00 +0800</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/web/tools-web-fee-polyfill-corejs-eslint/</guid><description>&lt;p>Web 网页为了保证在多个平台和低中高端设备上的体验稳定性和一致性，通常会做 Polyfill 以保证兼容性。&lt;/p></description></item><item><title>Web 前端调试工具：SourceMap 文件</title><link>https://leezchuan.github.io/blog/computer-technology/web/tools-web-fee-debug-with-source-map/</link><pubDate>Sun, 28 Nov 2021 22:31:00 +0800</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/web/tools-web-fee-debug-with-source-map/</guid><description>&lt;p>Web 前端项目出于加载性能优化和安全考虑，在生产环境部署的代码是经过混淆和压缩的，对于利用生产环境收集到的错误堆栈信息要进行调试是非常具有挑战性的。理想情况下，应该在生产环境收集错误堆栈信息，然后映射到源码进行调试。恰好，&lt;strong>SourceMap 文件&lt;/strong>提供了这个机制，可以将编译（压缩）后的代码映射到源代码中。&lt;/p></description></item><item><title>前端开发中的流程自动化与提效实践</title><link>https://leezchuan.github.io/blog/computer-technology/web/practice-of-project-development-and-auto-workflow/</link><pubDate>Sun, 28 Nov 2021 22:31:00 +0800</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/web/practice-of-project-development-and-auto-workflow/</guid><description>&lt;p>随着前端的发展，越来越多的工具库、方法被用在日常研发流程中，这大大提升了业务开发的效率，而随着各类自动化流程的建设，开发同学也不再需要关注到每一个细节。前段时间项目阶段性交付，在推进的过程中也做了不少尝试，虽然从长期看，这类工作最后可能都该收敛到基础设施部门或者标准的自动化流程中去，但并不妨碍我通过实践来落实一些对项目开发的思考和想法。&lt;/p></description></item><item><title>Web 应用：轻量级状态管理工具 zustand</title><link>https://leezchuan.github.io/blog/computer-technology/web/web-app-model-zustand/</link><pubDate>Thu, 18 Nov 2021 00:14:00 +0800</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/web/web-app-model-zustand/</guid><description>&lt;p>基于 React.js 的 Web 应用如何完成状态管理？社区主流方案是 &lt;strong>react-redux&lt;/strong>，其本质上基于 React 的 &lt;code>Context&lt;/code> 特性实现，如果应用足够简单，实际上用 &lt;code>Context&lt;/code> 手写一个简单的状态管理工具倒也并不难。不过，考虑到工具的完善性、项目的健壮性，通常采用较好的、成熟的社区方案。在移动端场景下，&lt;strong>react-redux&lt;/strong> 略显臃肿，轻量级状态管理工具 &lt;strong>zustand&lt;/strong> 倒是一个不错的替代方案。&lt;/p></description></item><item><title>Web 前端性能优化：案例分析 1</title><link>https://leezchuan.github.io/blog/computer-technology/web/web-performance-case-1/</link><pubDate>Fri, 24 Sep 2021 00:51:00 +0800</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/web/web-performance-case-1/</guid><description>&lt;p>能在真实业务场景中落地 Web 性能优化方案的机会鲜有，大多数时候业务是较为简单而且要求不高的，前段时间恰好有一个比较核心的业务，对稳定性和性能有一定的要求，在这个过程中也算是做了很多尝试和实践，在此作为案例记录一下分析的过程和最终解决的方案。&lt;/p></description></item><item><title>使用 Jest 和 Puppeteer 构建 Web 自动化测试平台</title><link>https://leezchuan.github.io/blog/computer-technology/web/tools-web-fee-test-with-jest-puppeteer/</link><pubDate>Sun, 15 Aug 2021 14:54:00 +0800</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/web/tools-web-fee-test-with-jest-puppeteer/</guid><description>&lt;p>测试为软件的稳定和完善提供了必要的支持，Web 前端开发领域相比于做单元测试，端到端测试更有意义和价值。谷歌发布的 Puppeteer 工具和脸书发布的 Jest 测试工具为 Web 端到端测试提供了极大的便利，这里记录了如何使用它们构建一个 Web 自动化测试平台。&lt;/p></description></item><item><title>Web 前端性能优化：核心概念与指标</title><link>https://leezchuan.github.io/blog/computer-technology/web/web-performance-core-concepts/</link><pubDate>Mon, 19 Jul 2021 00:51:00 +0800</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/web/web-performance-core-concepts/</guid><description>&lt;p>说到 Web 的性能优化，可能很多时候我们采取了一些措施，看到了肉眼可见的改进，如果我们可以对其进行测量，确定我们改进的效率（百分比）是不是会更有意义？换句话说，如果我们了解性能瓶颈可能发生的位置，衡量用户体验好坏的指标，做到实时追踪性能变化，我们是不是可以更迅速的采取优化措施？在应用上线前，我们就可以做一些低成本而有高收益的优化工作，进一步提升用户体验。&lt;/p></description></item><item><title>Web 前端性能优化：工具与技巧</title><link>https://leezchuan.github.io/blog/computer-technology/web/web-performance-optimize-skill/</link><pubDate>Mon, 20 Aug 2018 19:06:00 +0800</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/web/web-performance-optimize-skill/</guid><description>&lt;p>Web 前端的性能优化是非常迫切的，客户端的资源非常有限，而且层次不齐，很容易造成一些性能问题从而影响到最终给用户所呈现的数据信息结构的不完整。为了增强用户体验，我们必须在各个方面进行优化，同时也可以节省服务器成本。&lt;/p></description></item><item><title>Web 前端跨域访问</title><link>https://leezchuan.github.io/blog/computer-technology/web/web-cross-domain/</link><pubDate>Fri, 10 Aug 2018 15:18:00 +0800</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/web/web-cross-domain/</guid><description>&lt;p>为了用户的安全，浏览器通常都会限制跨域（Cross-domain）访问，也就是默认不允许不同域名下页面之间进行资源的传递和信息交互，但很多时候我们又有跨域请求资源的需求。&lt;/p></description></item><item><title>Web 本地存储</title><link>https://leezchuan.github.io/blog/computer-technology/web/web-local-storage/</link><pubDate>Fri, 01 Jun 2018 01:00:00 +0800</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/web/web-local-storage/</guid><description>&lt;p>为了达到某些需求，我们通常需要在本地存储一些数据，方便我们进行用户个性化定制服务。&lt;/p></description></item><item><title>Web 前端架构设计</title><link>https://leezchuan.github.io/blog/computer-technology/web/web-front-end-architecture/</link><pubDate>Wed, 28 Mar 2018 14:01:00 +0800</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/web/web-front-end-architecture/</guid><description>&lt;p>让 Web 前端开发可持续化、可扩展，关注四个核心&lt;strong>代码&lt;/strong>、&lt;strong>流程&lt;/strong>、&lt;strong>测试&lt;/strong>、&lt;strong>文档&lt;/strong>。&lt;/p></description></item><item><title>Web 应用：单页面应用与路由</title><link>https://leezchuan.github.io/blog/computer-technology/web/web-routing/</link><pubDate>Wed, 25 Oct 2017 00:51:00 +0800</pubDate><guid>https://leezchuan.github.io/blog/computer-technology/web/web-routing/</guid><description>&lt;p>现在，Web 技术不仅仅是局限于页面的开发技术，在应用的开发方面也是一种潮流，B/S 架构的技术是一种趋势。而像一般的管理型 Web 应用，不注重 SEO，非常适合单页面应用（SPA）的实现方式，而路由功能则是单页面应用的核心技术。&lt;/p></description></item></channel></rss>