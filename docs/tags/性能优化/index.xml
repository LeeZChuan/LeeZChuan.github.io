<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>性能优化 on 技术之心</title>
    <link>http://localhost:1313/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
    <description>Recent content in 性能优化 on 技术之心</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 04 Oct 2021 00:06:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web 前端性能优化：批量 DOM 操作 - FastDOM</title>
      <link>http://localhost:1313/blog/computer-technology/web/web-performance-fastdom/</link>
      <pubDate>Mon, 04 Oct 2021 00:06:00 +0800</pubDate>
      <guid>http://localhost:1313/blog/computer-technology/web/web-performance-fastdom/</guid>
      <description>&lt;p&gt;利用 JS 开发的原生应用与依赖于 React.js/Vue 开发的框架/库应用，性能孰高孰低？这两者最显著的区别在于原生应用需要手动操作 DOM 完成业务，而框架/库应用是基于数据变化响应式的应用，后者只需要关注数据如何变化，至于体现在 DOM 上的变化皆由框架/库内部自动完成。所以，要搞清楚两者的性能优劣，可能&lt;strong&gt;批量&lt;/strong&gt;的 DOM 操作是一个不可忽略的核心因素。从代码执行的角度分析，框架/库也是基于原生 API 进行的封装抽象，因此代码执行时的路径更长、堆栈更深，由此可见原生 API 的操作性能应该是最高的。但是，现实情况是业务通常来说是复杂的，代码实现中 DOM 操作的逻辑分散在各处，那么多个 DOM 操作之间是否会产生影响从而不利于性能？这个时候就要关注宿主浏览器的渲染机制是如何理解批量的 DOM 操作的，这里引入的概念就是&lt;strong&gt;关键渲染路径（Critical rendering path）&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web 前端性能优化：案例分析 1</title>
      <link>http://localhost:1313/blog/computer-technology/web/web-performance-case-1/</link>
      <pubDate>Fri, 24 Sep 2021 00:51:00 +0800</pubDate>
      <guid>http://localhost:1313/blog/computer-technology/web/web-performance-case-1/</guid>
      <description>&lt;p&gt;能在真实业务场景中落地 Web 性能优化方案的机会鲜有，大多数时候业务是较为简单而且要求不高的，前段时间恰好有一个比较核心的业务，对稳定性和性能有一定的要求，在这个过程中也算是做了很多尝试和实践，在此作为案例记录一下分析的过程和最终解决的方案。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web 前端性能优化：核心概念与指标</title>
      <link>http://localhost:1313/blog/computer-technology/web/web-performance-core-concepts/</link>
      <pubDate>Mon, 19 Jul 2021 00:51:00 +0800</pubDate>
      <guid>http://localhost:1313/blog/computer-technology/web/web-performance-core-concepts/</guid>
      <description>&lt;p&gt;说到 Web 的性能优化，可能很多时候我们采取了一些措施，看到了肉眼可见的改进，如果我们可以对其进行测量，确定我们改进的效率（百分比）是不是会更有意义？换句话说，如果我们了解性能瓶颈可能发生的位置，衡量用户体验好坏的指标，做到实时追踪性能变化，我们是不是可以更迅速的采取优化措施？在应用上线前，我们就可以做一些低成本而有高收益的优化工作，进一步提升用户体验。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web 前端性能优化：工具与技巧</title>
      <link>http://localhost:1313/blog/computer-technology/web/web-performance-optimize-skill/</link>
      <pubDate>Sat, 20 Aug 2016 19:06:00 +0800</pubDate>
      <guid>http://localhost:1313/blog/computer-technology/web/web-performance-optimize-skill/</guid>
      <description>&lt;p&gt;Web 前端的性能优化是非常迫切的，客户端的资源非常有限，而且层次不齐，很容易造成一些性能问题从而影响到最终给用户所呈现的数据信息结构的不完整。为了增强用户体验，我们必须在各个方面进行优化，同时也可以节省服务器成本。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
