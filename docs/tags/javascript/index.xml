<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on 技术之心</title>
    <link>http://localhost:1313/tags/javascript/</link>
    <description>Recent content in JavaScript on 技术之心</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 25 Apr 2021 22:56:00 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web 前端性能优化：解析函数节流与防抖的实现</title>
      <link>http://localhost:1313/blog/computer-technology/web/javascript/debouncing-and-throttling/</link>
      <pubDate>Sun, 25 Apr 2021 22:56:00 -0400</pubDate>
      <guid>http://localhost:1313/blog/computer-technology/web/javascript/debouncing-and-throttling/</guid>
      <description>&lt;p&gt;前端开发中，有一个使用较为普遍的性能优化技巧，即函数节流（Throttle）和防抖（Debounce），其主要作用是根据时间对函数调用做以限制。最常见的业务场景是监听页面的 &lt;code&gt;scroll&lt;/code&gt; 事件，浏览器可以在 1s 内触发该事件数次（甚至达数十次），如果事件处理程序在这 1s 内多次执行，必然会造成一定的性能问题，影响用户体验。&lt;/p&gt;&#xA;&lt;!-- truncate --&gt;&#xA;&lt;p&gt;本质上，函数节流和防抖并不是控制事件源的触发次数，而是在事件短时间内连续多次触发之后控制相应事件处理程序的调用频率。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript 异步编程</title>
      <link>http://localhost:1313/blog/computer-technology/web/javascript/web-js-async/</link>
      <pubDate>Wed, 22 Mar 2017 15:48:00 -0400</pubDate>
      <guid>http://localhost:1313/blog/computer-technology/web/javascript/web-js-async/</guid>
      <description>&lt;p&gt;JavaScript 作为一门在 Web 开发中的主流语言，常常涉及到交互事件方面的应用，这不可避免的用到了异步编程的方法，而它本身则是单线程运行的。在以往的开发中，异步编程正变得越来越难管理，新的 Promise 标准 API 将使得异步编程更加方便、安全。&lt;/p&gt;&#xA;&lt;!-- truncate --&gt;&#xA;&lt;h3 id=&#34;异步与并行&#34;&gt;异步与并行&lt;/h3&gt;&#xA;&lt;p&gt;作为 Web 前端开发中的主流语言，JavaScript 需要实现诸多的交互动作，但是在宿主环境（例如 v8）中 JS 引擎只有一个主线程，所以多线程并行处理是不可能的。因此，异步编程显得尤为重要。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DOM-加载 JavaScript</title>
      <link>http://localhost:1313/blog/computer-technology/web/dom/dom-js/</link>
      <pubDate>Tue, 24 May 2016 22:49:00 -0400</pubDate>
      <guid>http://localhost:1313/blog/computer-technology/web/dom/dom-js/</guid>
      <description>&lt;p&gt;页面的动态交互离不开 Javascript，将 js 脚本引入页面时会阻塞页面加载，在某些时候我们则可以选择异步加载 js 脚本。&lt;/p&gt;&#xA;&lt;!-- truncate --&gt;&#xA;&lt;h3 id=&#34;引入-js-代码&#34;&gt;引入 js 代码&lt;/h3&gt;&#xA;&lt;p&gt;通常我们会将 JavaScript 代码写在一个单独的文件中，这样做的好处是页面整洁、结构更清晰，页面更小加载速度更快，同时也易维护。实际上在页面中引入 js 代码的方法有多种，我们按需选择即可。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
