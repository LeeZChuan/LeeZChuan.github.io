<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>前端 on 技术之心</title><link>https://leezchuan.github.io/categories/%E5%89%8D%E7%AB%AF/</link><description>Recent content in 前端 on 技术之心</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 01 Dec 2023 20:04:00 -0500</lastBuildDate><atom:link href="https://leezchuan.github.io/categories/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>架构设计笔记</title><link>https://leezchuan.github.io/blog/notes/architecture-design/</link><pubDate>Fri, 01 Dec 2023 20:04:00 -0500</pubDate><guid>https://leezchuan.github.io/blog/notes/architecture-design/</guid><description>&lt;!-- truncate -->
&lt;p>该文章将目前可能能用到的架构理念，概念统一汇总整理～&lt;/p>
&lt;h3 id="多态">多态&lt;/h3>
&lt;ul>
&lt;li>多态：多态的实际含义是:同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结 果。换句话说，给不同的对象发送同一个消息的时候，这些对象会根据这个消息分别给出不同的反馈。&lt;/li>
&lt;li>多态背后的思想是将“做什么”和“谁去做以及怎样去做”分离开来，也就是将“不变的事 物”与 “可能改变的事物”分离开来。&lt;/li>
&lt;li>&lt;strong>把不变的部分隔离出来，把可变的部分封装起来，这给予了我们 扩展程序的能力&lt;/strong>&lt;/li>
&lt;li>使用继承来得到多态效果，是让对象表现出多态性的最常用手段。&lt;/li>
&lt;/ul>
&lt;h3 id="高阶函数实现aop">高阶函数实现AOP&lt;/h3>
&lt;blockquote>
&lt;p>把这些功能抽离出来之后， 再通过“动态织入”的方式掺入业务逻辑模块中。这样做的好处首先是可以保持业务逻辑模块的纯净和高内聚性，其次是可以很方便地复用日志统计等功能模块。&lt;/p></description></item><item><title>从贝塞尔曲线的计算感受数学建模的魅力</title><link>https://leezchuan.github.io/blog/tools/tools-animation-math/</link><pubDate>Thu, 01 Dec 2022 01:04:00 -0500</pubDate><guid>https://leezchuan.github.io/blog/tools/tools-animation-math/</guid><description>&lt;p>最近在做前端可视化相关的东西，在完成动画效果时，遇到一个不是很好处理的问题，需要让一个元素在画布上以曲线的轨迹进行运动。因为动画这块之前基本也没有怎么接触过，做的也都是简单的线性动画效果，所以碰到这个需求点的时候觉得是有点难度的。&lt;/p>
&lt;p>其实，要真的实现按照一定曲线轨迹运动的效果倒也不难，毕竟圆、椭圆方程在平时做布局计算的时候用的也挺多的。但是，用圆或者椭圆计算曲线相当于是找了个特殊场景，不具备通用性；另一方面，说到曲线的绘制，贝塞尔曲线是绕不开的，这也是非常值得考虑的方案。&lt;/p>
&lt;!-- truncate -->
&lt;h2 id="动画帧计算">动画帧计算&lt;/h2>
&lt;p>一段动画实际上是由多个静态帧组成的，当帧率达到人眼不可分辨的程度时（比如 60 FPS），就感觉像是一个无缝连续的视频在流畅的播放。而某一静态帧的状态用数学公式来表达如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>y = F(t) (0 &amp;lt;= t &amp;lt;= 1)
&lt;/code>&lt;/pre>&lt;p>那么对于一个物体从 &lt;strong>x0&lt;/strong> 运动到 &lt;strong>x1&lt;/strong>，如何计算 &lt;strong>t&lt;/strong> 时刻的位置？按照我的思路来看，可以转化为以下数学公式：&lt;/p></description></item></channel></rss>