<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工具 on 技术之心</title>
    <link>//localhost:1313/tags/%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 工具 on 技术之心</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Aug 2022 17:33:00 -0400</lastBuildDate>
    <atom:link href="//localhost:1313/tags/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>利用脚本执行 `tsc` 忽略类型检查错误</title>
      <link>//localhost:1313/blog/computer-technology/typescript/tools-typescript-use-script-to-ts-types/</link>
      <pubDate>Sat, 06 Aug 2022 17:33:00 -0400</pubDate>
      <guid>//localhost:1313/blog/computer-technology/typescript/tools-typescript-use-script-to-ts-types/</guid>
      <description>&lt;p&gt;在发布 npm 包时添加对 TypeScript 类型定义文件的支持会让用户的使用体验增色不少，TypeScript 官方提供了 &lt;code&gt;tsc --emitDeclarationOnly&lt;/code&gt; 命令用来生成类型定义文件（&lt;code&gt;.d.ts&lt;/code&gt;）。但是，该命令会同时执行类型检查，遇到错误时会报错中断命令行进程，这就使其无法直接集成在 CI 环节在发布 npm 包时自动执行生成类型定义文件的操作。当然，一个解决办法就是解决掉代码中所有的类型检查错误即可，既然讨论到这个问题，必然不会花费额外精力去解决一些历史遗留问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>前端工程化：对于构建工具链的简单思考</title>
      <link>//localhost:1313/blog/computer-technology/web/tools-web-fee-toolchain/</link>
      <pubDate>Mon, 01 Aug 2022 21:07:00 -0400</pubDate>
      <guid>//localhost:1313/blog/computer-technology/web/tools-web-fee-toolchain/</guid>
      <description>&lt;p&gt;前端工程化是在做与业务开发完全不同的事情，旨在解决软件工程领域与开发者密切相关的问题，通常会将其与基建开发、DevOps 放在一起讨论。前端开发是复杂的，其结合了 HTML/CSS/JavaScript 3 种语言，甚至还有很多其超集，没有开箱即用的工具链，不像 Java Web 开发、Android 开发等等有官方或者商业领域非常成熟的工具可以利用，一切都源于开源社区的从 0 开始构建。正因如此，前端工程化领域百花齐放，开放与创新展现的淋漓尽致，这也是前端开发者了解学习软件工程的机会。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何更好的维护开源项目</title>
      <link>//localhost:1313/blog/computer-technology/tools/tools-maintain-open-source-projects-with-tools/</link>
      <pubDate>Fri, 22 Apr 2022 22:53:00 -0400</pubDate>
      <guid>//localhost:1313/blog/computer-technology/tools/tools-maintain-open-source-projects-with-tools/</guid>
      <description>&lt;p&gt;一直以来，开源精神被开发者所推崇，开源项目为开发者提供了不用付出除时间以外任何成本就可以学习前沿技术的最佳途径，另一方面，我们应该思考开源为何会成功，在全球开发者参与协作的情况下代码仓库为何能保持整洁、不出现大规模冲突而奔溃，上下游依赖如何管理，这背后有既定的规范进行强约束，也有一系列社区工具来完成复杂而有价值的工作。所以，从参与或者维护开源项目的角度来看，这些&lt;strong&gt;社区公认的最佳实践&lt;/strong&gt;值得我们了解，学习这些东西也能在一定程度上提高我们管理项目的能力。&lt;/p&gt;&#xA;&lt;!-- truncate --&gt;&#xA;&lt;p&gt;以下内容属于经验积累，持续更新，仅供参考。&lt;/p&gt;&#xA;&lt;h3 id=&#34;许可证license&#34;&gt;许可证（License）&lt;/h3&gt;&#xA;&lt;p&gt;代码本质上是开发者的创作成果，具有&lt;strong&gt;专利权&lt;/strong&gt;，所以开发者应该意识到自己所享有的权利，同时在使用其他人所提供的代码时避免侵权。作为开源项目，有必要在开源之前选择一个合适的&lt;strong&gt;许可证&lt;/strong&gt;，提前&lt;strong&gt;声明权利和义务&lt;/strong&gt;（一般作为单独的 &lt;em&gt;LICENSE&lt;/em&gt; 文本文件保存），避免在后期陷入麻烦之中，GitHub 官方为我们提供了一个简单的工具站点：&lt;/p&gt;</description>
    </item>
    <item>
      <title>TypeScript：扩展第三方库的类型定义</title>
      <link>//localhost:1313/blog/computer-technology/typescript/tools-typescript-type-extend/</link>
      <pubDate>Sun, 09 Jan 2022 17:36:00 -0500</pubDate>
      <guid>//localhost:1313/blog/computer-technology/typescript/tools-typescript-type-extend/</guid>
      <description>&lt;p&gt;TypeScript 作为 JavaScript 的超集，为 Web 开发带来了强类型语言和类似代码智能提示这种良好的开发体验，而代码提示依赖于类型定义文件。类型定义文件的发展也经历了一个逐步演变的过程，从最初基于 JavaScript 编写的 npm 包，通过&lt;a href=&#34;https://github.com/DefinitelyTyped/DefinitelyTyped&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;社区方案&lt;/a&gt;来引入类型定义包，再到目前多数模块基于 TypeScript 编写并在发布时带上类型定义文件这种最佳方案，开发者体验得到进一步的提升。&lt;/p&gt;</description>
    </item>
    <item>
      <title>解析基于 core-js 与 ESLint 的 Web 兼容方案</title>
      <link>//localhost:1313/blog/computer-technology/web/tools-web-fee-polyfill-corejs-eslint/</link>
      <pubDate>Tue, 07 Dec 2021 01:13:00 -0500</pubDate>
      <guid>//localhost:1313/blog/computer-technology/web/tools-web-fee-polyfill-corejs-eslint/</guid>
      <description>&lt;p&gt;Web 网页为了保证在多个平台和低中高端设备上的体验稳定性和一致性，通常会做 Polyfill 以保证兼容性。&lt;/p&gt;&#xA;&lt;p&gt;然而，兼容性问题本身是个难题，Polyfill 也并非很好处理，所以在技术演变的过程中，社区达成了一致，有一个主流的方案，大家共同来使用和维护。当下社区的主流方案则是基于 &lt;code&gt;core-js&lt;/code&gt;，另一方面， 利用 ESLint 插件则可以做到自动检测代码中需要添加 Polyfill 的 API。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web 前端调试工具：SourceMap 文件</title>
      <link>//localhost:1313/blog/computer-technology/web/tools-web-fee-debug-with-source-map/</link>
      <pubDate>Sun, 28 Nov 2021 22:31:00 -0500</pubDate>
      <guid>//localhost:1313/blog/computer-technology/web/tools-web-fee-debug-with-source-map/</guid>
      <description>&lt;p&gt;Web 前端项目出于加载性能优化和安全考虑，在生产环境部署的代码是经过混淆和压缩的，对于利用生产环境收集到的错误堆栈信息要进行调试是非常具有挑战性的。理想情况下，应该在生产环境收集错误堆栈信息，然后映射到源码进行调试。恰好，&lt;strong&gt;SourceMap 文件&lt;/strong&gt;提供了这个机制，可以将编译（压缩）后的代码映射到源代码中。&lt;/p&gt;&#xA;&lt;!-- truncate --&gt;&#xA;&lt;p&gt;以下是其规范：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://sourcemaps.info/spec.html&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;Source Map Revision 3 Proposal&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用 Jest 和 Puppeteer 构建 Web 自动化测试平台</title>
      <link>//localhost:1313/blog/computer-technology/web/tools-web-fee-test-with-jest-puppeteer/</link>
      <pubDate>Sun, 15 Aug 2021 14:54:00 -0400</pubDate>
      <guid>//localhost:1313/blog/computer-technology/web/tools-web-fee-test-with-jest-puppeteer/</guid>
      <description>&lt;p&gt;测试为软件的稳定和完善提供了必要的支持，Web 前端开发领域相比于做单元测试，端到端测试更有意义和价值。谷歌发布的 Puppeteer 工具和脸书发布的 Jest 测试工具为 Web 端到端测试提供了极大的便利，这里记录了如何使用它们构建一个 Web 自动化测试平台。&lt;/p&gt;</description>
    </item>
    <item>
      <title>理解编程语言的设计与实现</title>
      <link>//localhost:1313/blog/computer-technology/tools/tools-programming-language/</link>
      <pubDate>Sun, 02 May 2021 17:03:00 -0400</pubDate>
      <guid>//localhost:1313/blog/computer-technology/tools/tools-programming-language/</guid>
      <description>&lt;p&gt;编程语言本质上是给开发者使用的工具，不同的业务领域使用不同的编程语言去实现具体的业务，是基于语言本身的设计理念与实现方式来做选择，那么作为开发者应该了解一下编程语言是如何被发明的，且其设计理念是什么。&lt;/p&gt;&#xA;&lt;!-- truncate --&gt;&#xA;&lt;p&gt;Ruby 是我大学期间课余接触且实际使用过的一门语言，目前我甚是喜爱，其作者松本行弘设计 Ruby 的初心是：为开发者服务，注重简洁和效率。这篇文章主要也是为了记录在拜读了松本行弘先生新书《编程语言的设计与实现》之后掌握的一些相关的关键知识点和其它收获。由于该书主要是围绕作者在设计 Ruby 和新语言 Streem 过程中的一些思考和经验，有些东西可能不太具备普适性，而我在这里主要还是关注一些通用性的知识点和概念。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用 npm</title>
      <link>//localhost:1313/blog/computer-technology/nodejs/tools-npm/</link>
      <pubDate>Sat, 06 Jul 2019 15:43:00 -0400</pubDate>
      <guid>//localhost:1313/blog/computer-technology/nodejs/tools-npm/</guid>
      <description>&lt;p&gt;npm 是 Node.js 的一个包管理器，Web 前端工程师也经常利用它来简化开发流程，看看如何愉快的使用 npm ，并且发布自己的包，让 npm 成为我们的开发利器。&lt;/p&gt;&#xA;&lt;!-- truncate --&gt;&#xA;&lt;h3 id=&#34;npm&#34;&gt;npm&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;**Node.js：**&lt;a href=&#34;https://www.npmjs.com/&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;https://www.npmjs.com/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>IDE：VS Code 配置同步</title>
      <link>//localhost:1313/blog/computer-technology/tools/tools-vscode-sync/</link>
      <pubDate>Wed, 15 Aug 2018 16:42:00 -0400</pubDate>
      <guid>//localhost:1313/blog/computer-technology/tools/tools-vscode-sync/</guid>
      <description>&lt;p&gt;利用一款插件来同步 VS Code 的配置到 GitHub 的 gist 上，实现多个设备间共享一套配置。&lt;/p&gt;&#xA;&lt;!-- truncate --&gt;&#xA;&lt;h3 id=&#34;vs-code&#34;&gt;VS Code&lt;/h3&gt;&#xA;&lt;p&gt;Visual Studio Code 是由微软出品的一款轻量级编辑器，兼有部分 IDE 功能。在之前，Sublime Text 是最受欢迎的编辑器（开源），也为多数前端开发者所推崇，当然说到底它依然是个编辑器。随着时间的推移，GitHub 打造了自家的编辑器 Atom，微软的 VS Code 也横空出世，更有其它优秀的轻量级编辑器在市场上展开角逐。不过，到现在来看，VS Code 可能胜出了，已成为前端开发的利器。&lt;/p&gt;</description>
    </item>
    <item>
      <title>单元测试工具：Junit</title>
      <link>//localhost:1313/blog/computer-technology/tools/tools-junit/</link>
      <pubDate>Wed, 30 Aug 2017 23:42:00 -0400</pubDate>
      <guid>//localhost:1313/blog/computer-technology/tools/tools-junit/</guid>
      <description>&lt;p&gt;通常一个项目的代码量是比较大的，而且其中逻辑也较为复杂，在开发完成后再进行项目测试其实是比较耗费时间和精力的，因此边开发边测试是个很好的选择，而 JUnit 则为我们提供了这样的便利。&lt;/p&gt;&#xA;&lt;!-- truncate --&gt;&#xA;&lt;h3 id=&#34;junit&#34;&gt;JUnit&lt;/h3&gt;&#xA;&lt;p&gt;JUnit 是一个用来对 Java 代码进行单元测试的框架，是 XUnit （一套基于测试驱动开发的测试框架）的一个子集，类似的还有 PythonUnit、CppUnit。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用 Git</title>
      <link>//localhost:1313/blog/computer-technology/tools/tools-git/</link>
      <pubDate>Sat, 31 Dec 2016 13:49:00 -0500</pubDate>
      <guid>//localhost:1313/blog/computer-technology/tools/tools-git/</guid>
      <description>&lt;p&gt;Git 是一个分布式的版本控制工具，类似的版本控制工具还有 SVN ；由于 GitHub 平台的盛行，也使得 git 更加受欢迎，在 Windows 平台使用 git 也是非常方便的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>编辑器：Sublime Text 常用插件</title>
      <link>//localhost:1313/blog/computer-technology/tools/tools-sublime/</link>
      <pubDate>Thu, 19 May 2016 13:38:00 -0400</pubDate>
      <guid>//localhost:1313/blog/computer-technology/tools/tools-sublime/</guid>
      <description>&lt;p&gt;Sumblime Text 是一个具有漂亮的界面和强大功能的文本编辑器，而且也支持许多丰富的插件。它是一个收费软件，但是允许开发人员无限期的免费试用。这篇文章介绍一下常用的插件。&lt;/p&gt;&#xA;&lt;!-- truncate --&gt;&#xA;&lt;h3 id=&#34;安装-sublime-text&#34;&gt;安装 Sublime Text&lt;/h3&gt;&#xA;&lt;p&gt;Sublime Text 编辑器，我们直接去官网下载相应版本安装即可，2 或 3 版本官网均有链接。&lt;/p&gt;</description>
    </item>
    <item>
      <title>编辑器：Sublime Text - Vim 插件</title>
      <link>//localhost:1313/blog/computer-technology/tools/tools-sublime-vim/</link>
      <pubDate>Wed, 18 May 2016 12:55:00 -0400</pubDate>
      <guid>//localhost:1313/blog/computer-technology/tools/tools-sublime-vim/</guid>
      <description>&lt;p&gt;Sumblime Text 是一个具有漂亮的界面和强大功能的文本编辑器，而且也支持许多丰富的插件。它是一个收费软件，但是允许开发人员无限期的免费试用。&lt;/p&gt;&#xA;&lt;!-- truncate --&gt;&#xA;&lt;h3 id=&#34;vim&#34;&gt;Vim&lt;/h3&gt;&#xA;&lt;p&gt;Vim 是 Linux 操作系统下类 Vi 编辑器，是一款被开发者广泛使用，并且功能强大的文本编辑器。而 Sublime Text 最初的设计初衷也是基于 Vim 的设计思想，被设计为一个跨平台的具有丰富扩展功能的 Vim。随着后来的发展，它已经不仅仅是单纯的模仿 Vim，而是支持越来越多的插件和强大的功能。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
